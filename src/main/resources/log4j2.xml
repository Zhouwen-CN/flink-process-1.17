<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL-->
<!--status="WARN" :用于设置log4j2自身内部日志的信息输出级别，默认是OFF-->
<!--monitorInterval="30"  :间隔秒数,自动检测配置文件的变更和重新配置本身-->
<!--<configuration status="WARN" monitorInterval="30">-->
<configuration>
    <Properties>
        <!--自定义一些常量，之后使用${变量名}引用-->
        <Property name="LOG_HOME">./logs</Property>
        <Property name="LOG_MODULE_NAME">flink-process</Property>
        <Property name="LOG_MAX_SIZE">100 MB</Property>
        <Property name="LOG_MAX_FILE">20</Property>
        <Property name="LOG_PATTERN">%d{yyyy-MM-dd HH:mm:ss} %-5p %C:%L - %m%n</Property>
        <Property name="LOG_INFO_LEVEL">info</Property>
        <Property name="LOG_ERROR_LEVEL">error</Property>
    </Properties>
    <!--appenders:定义输出内容,输出格式,输出方式,日志保存策略等,常用其下三种标签[console,File,RollingFile]-->
    <appenders>
        <!--console :控制台输出的配置-->
        <console name="Console" target="SYSTEM_OUT">
            <!--PatternLayout :输出日志的格式-->
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>
        </console>
        <RollingFile name="RollingFileInfo" fileName="${LOG_HOME}/${LOG_MODULE_NAME}-${LOG_INFO_LEVEL}.log"
                     filePattern="${LOG_HOME}/$${date:yyyy-MM}/${LOG_MODULE_NAME}-${LOG_INFO_LEVEL}-%d{yyyy-MM-dd}-%i.log">
            <!--ThresholdFilter :日志输出过滤-->
            <!--如果是error级别拒绝，设置 onMismatch="NEUTRAL" 可以让日志经过后续的过滤器-->
            <!-- <ThresholdFilter level="${LOG_ERROR_LEVEL}" onMatch="DENY" onMismatch="NEUTRAL"/> -->
            <!--level="info" :日志级别,onMatch="ACCEPT" :级别在info之上则接受,onMismatch="DENY" :级别在info之下则拒绝-->
            <ThresholdFilter level="${LOG_INFO_LEVEL}" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <!-- Policies :日志滚动策略-->
            <Policies>
                <!-- TimeBasedTriggeringPolicy :时间滚动策略,默认0点小时产生新的文件,interval="6" : 自定义文件滚动时间间隔,每隔6小时产生新文件, modulate="true" : 产生文件是否以0点偏移时间,即6点,12点,18点,0点-->
                <!-- <TimeBasedTriggeringPolicy interval="6" modulate="true"/> -->
                <!-- SizeBasedTriggeringPolicy :文件大小滚动策略 -->
                <SizeBasedTriggeringPolicy size="${LOG_MAX_SIZE}"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
            <DefaultRolloverStrategy max="${LOG_MAX_FILE}"/>
        </RollingFile>

        <RollingFile name="RollingFileError" fileName="${LOG_HOME}/${LOG_MODULE_NAME}-${LOG_ERROR_LEVEL}.log"
                     filePattern="${LOG_HOME}/$${date:yyyy-MM}/${LOG_MODULE_NAME}-${LOG_ERROR_LEVEL}-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="${LOG_ERROR_LEVEL}" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                <SizeBasedTriggeringPolicy size="${LOG_MAX_SIZE}"/>
            </Policies>
        </RollingFile>
    </appenders>

    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        <!-- Root节点用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出 -->
        <root level="${LOG_INFO_LEVEL}">
            <appender-ref ref="Console"/>
            <appender-ref ref="RollingFileInfo"/>
            <appender-ref ref="RollingFileError"/>
        </root>
        <!--AsyncLogger :异步日志,LOG4J有三种日志模式,全异步日志,混合模式,同步日志,性能从高到底,线程越多效率越高,也可以避免日志卡死线程情况发生-->
        <!--additivity="false" : additivity设置事件是否在root logger输出，为了避免重复输出，可以在Logger 标签下设置additivity为”false”-->
        <AsyncLogger name="AsyncLogger" level="${LOG_INFO_LEVEL}" additivity="false">
            <appender-ref ref="RollingFileInfo"/>
            <appender-ref ref="RollingFileError"/>
        </AsyncLogger>
    </loggers>
</configuration>